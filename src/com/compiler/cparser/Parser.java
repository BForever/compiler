
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiler.cparser;

import com.compiler.cparser.ast.*;
import com.compiler.cparser.ast.node.*;
import com.compiler.cparser.ParserSym;
import com.compiler.exception.SyntaxError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\006\003\000\002\006\005\000" +
    "\002\005\003\000\002\005\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\007\000\002\013" +
    "\004\000\002\014\003\000\002\014\002\000\002\015\003" +
    "\000\002\007\003\000\002\007\006\000\002\016\006\000" +
    "\002\016\005\000\002\017\003\000\002\017\005\000\002" +
    "\020\004\000\002\021\006\000\002\024\004\000\002\024" +
    "\002\000\002\025\004\000\002\025\003\000\002\025\005" +
    "\000\002\025\011\000\002\025\007\000\002\025\014\000" +
    "\002\023\004\000\002\023\002\000\002\022\005\000\002" +
    "\010\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\004\000\002\026\006\000\002\026\005\000" +
    "\002\026\006\000\002\026\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\014\002\ufffe\004\007\005\004\006\015\007" +
    "\014\001\002\000\006\036\ufff6\045\ufff6\001\002\000\004" +
    "\002\001\001\002\000\006\036\ufff7\045\ufff7\001\002\000" +
    "\006\043\ufff0\045\210\001\002\000\004\002\206\001\002" +
    "\000\006\036\ufff8\045\ufff8\001\002\000\006\036\021\045" +
    "\020\001\002\000\014\002\ufffe\004\007\005\004\006\015" +
    "\007\014\001\002\000\006\036\ufff4\045\ufff4\001\002\000" +
    "\006\036\ufff5\045\ufff5\001\002\000\004\002\uffff\001\002" +
    "\000\004\036\205\001\002\000\012\035\uffee\036\uffee\037" +
    "\uffee\041\174\001\002\000\014\002\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\001\002\000\004\043\033\001\002\000" +
    "\010\035\024\036\ufffa\037\025\001\002\000\004\045\031" +
    "\001\002\000\004\047\026\001\002\000\004\040\027\001" +
    "\002\000\014\015\uffed\035\uffed\036\uffed\037\uffed\042\uffed" +
    "\001\002\000\004\036\ufff9\001\002\000\014\015\uffee\035" +
    "\uffee\036\uffee\037\uffee\042\uffee\001\002\000\014\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002\000\046\004" +
    "\007\005\004\006\015\007\014\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\025\uffdd\033\uffdd\041\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000\046" +
    "\004\007\005\004\006\015\007\014\010\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\025\uffdd\033\uffdd\041\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000" +
    "\036\010\141\011\137\013\133\014\134\025\043\033\053" +
    "\041\044\043\033\044\uffe5\045\050\046\047\047\046\050" +
    "\051\051\052\001\002\000\004\045\031\001\002\000\004" +
    "\036\132\001\002\000\006\035\130\036\uffdb\001\002\000" +
    "\012\015\042\035\uffd9\036\uffd9\037\025\001\002\000\022" +
    "\025\043\033\053\041\044\045\050\046\047\047\046\050" +
    "\051\051\052\001\002\000\022\025\043\033\053\041\044" +
    "\045\050\046\047\047\046\050\051\051\052\001\002\000" +
    "\022\025\043\033\053\041\044\045\050\046\047\047\046" +
    "\050\051\051\052\001\002\000\050\015\071\016\070\017" +
    "\060\020\074\021\065\022\063\023\062\024\064\025\055" +
    "\026\073\027\066\030\061\031\056\032\075\034\067\035" +
    "\uffd8\036\uffd8\037\072\041\057\001\002\000\054\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\001\002\000\054\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\001\002\000\054\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\001\002\000\054\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\001\002\000\054" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\001\002\000\022\025\043\033\053\041\044" +
    "\045\050\046\047\047\046\050\051\051\052\001\002\000" +
    "\054\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\034\067\035\uffc7\036\uffc7\037\072\040\uffc7" +
    "\041\057\042\uffc7\001\002\000\022\025\043\033\053\041" +
    "\044\045\050\046\047\047\046\050\051\051\052\001\002" +
    "\000\022\025\043\033\053\041\044\045\050\046\047\047" +
    "\046\050\051\051\052\001\002\000\024\025\043\033\053" +
    "\041\044\042\117\045\050\046\047\047\046\050\051\051" +
    "\052\001\002\000\022\025\043\033\053\041\044\045\050" +
    "\046\047\047\046\050\051\051\052\001\002\000\022\025" +
    "\043\033\053\041\044\045\050\046\047\047\046\050\051" +
    "\051\052\001\002\000\022\025\043\033\053\041\044\045" +
    "\050\046\047\047\046\050\051\051\052\001\002\000\022" +
    "\025\043\033\053\041\044\045\050\046\047\047\046\050" +
    "\051\051\052\001\002\000\022\025\043\033\053\041\044" +
    "\045\050\046\047\047\046\050\051\051\052\001\002\000" +
    "\022\025\043\033\053\041\044\045\050\046\047\047\046" +
    "\050\051\051\052\001\002\000\022\025\043\033\053\041" +
    "\044\045\050\046\047\047\046\050\051\051\052\001\002" +
    "\000\022\025\043\033\053\041\044\045\050\046\047\047" +
    "\046\050\051\051\052\001\002\000\022\025\043\033\053" +
    "\041\044\045\050\046\047\047\046\050\051\051\052\001" +
    "\002\000\022\025\043\033\053\041\044\045\050\046\047" +
    "\047\046\050\051\051\052\001\002\000\022\025\043\033" +
    "\053\041\044\045\050\046\047\047\046\050\051\051\052" +
    "\001\002\000\022\025\043\033\053\041\044\045\050\046" +
    "\047\047\046\050\051\051\052\001\002\000\022\025\043" +
    "\033\053\041\044\045\050\046\047\047\046\050\051\051" +
    "\052\001\002\000\022\025\043\033\053\041\044\045\050" +
    "\046\047\047\046\050\051\051\052\001\002\000\054\015" +
    "\uffd5\016\070\017\060\020\074\021\065\022\063\023\062" +
    "\024\064\025\055\026\073\027\066\030\061\031\056\032" +
    "\uffd5\034\067\035\uffd5\036\uffd5\037\072\040\uffd5\041\057" +
    "\042\uffd5\001\002\000\054\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\064\025\055\026\073" +
    "\027\066\030\061\031\uffd2\032\uffd2\034\067\035\uffd2\036" +
    "\uffd2\037\072\040\uffd2\041\057\042\uffd2\001\002\000\054" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\034\067\035\uffcc\036\uffcc\037\072\040\uffcc\041" +
    "\057\042\uffcc\001\002\000\046\015\071\016\070\017\060" +
    "\020\074\021\065\022\063\023\062\024\064\025\055\026" +
    "\073\027\066\030\061\031\056\032\075\034\067\037\072" +
    "\040\102\041\057\001\002\000\054\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\001\002" +
    "\000\054\015\071\016\070\017\060\020\074\021\065\022" +
    "\063\023\062\024\064\025\055\026\073\027\066\030\061" +
    "\031\056\032\075\034\067\035\uffd7\036\uffd7\037\072\040" +
    "\uffd7\041\057\042\uffd7\001\002\000\054\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\064\025" +
    "\055\026\073\027\066\030\061\031\uffd4\032\uffd4\034\067" +
    "\035\uffd4\036\uffd4\037\072\040\uffd4\041\057\042\uffd4\001" +
    "\002\000\054\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\001\002\000\054\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\034" +
    "\067\035\uffcb\036\uffcb\037\072\040\uffcb\041\057\042\uffcb" +
    "\001\002\000\054\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\064\025\055\026\073\027\066" +
    "\030\061\031\uffd1\032\uffd1\034\067\035\uffd1\036\uffd1\037" +
    "\072\040\uffd1\041\057\042\uffd1\001\002\000\054\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\073\027\066\030\061\031\uffce\032\uffce" +
    "\034\067\035\uffce\036\uffce\037\072\040\uffce\041\057\042" +
    "\uffce\001\002\000\054\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\064\025\055\026\073\027" +
    "\066\030\061\031\uffd0\032\uffd0\034\067\035\uffd0\036\uffd0" +
    "\037\072\040\uffd0\041\057\042\uffd0\001\002\000\054\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\064\025\055\026\073\027\066\030\061\031\uffcf\032" +
    "\uffcf\034\067\035\uffcf\036\uffcf\037\072\040\uffcf\041\057" +
    "\042\uffcf\001\002\000\054\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\034\067\035\uffca\036" +
    "\uffca\037\072\040\uffca\041\057\042\uffca\001\002\000\054" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\064\025\055\026\073\027\066\030\061\031\uffd3" +
    "\032\uffd3\034\067\035\uffd3\036\uffd3\037\072\040\uffd3\041" +
    "\057\042\uffd3\001\002\000\050\015\071\016\070\017\060" +
    "\020\074\021\065\022\063\023\062\024\064\025\055\026" +
    "\073\027\066\030\061\031\056\032\075\034\067\035\121" +
    "\037\072\041\057\042\uffbd\001\002\000\004\042\120\001" +
    "\002\000\054\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\001\002\000\054\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\001\002\000\022\025\043\033\053\041\044\045\050\046" +
    "\047\047\046\050\051\051\052\001\002\000\004\042\uffbc" +
    "\001\002\000\054\015\uffd6\016\070\017\060\020\074\021" +
    "\065\022\063\023\062\024\064\025\055\026\073\027\066" +
    "\030\061\031\uffd6\032\uffd6\034\067\035\uffd6\036\uffd6\037" +
    "\072\040\uffd6\041\057\042\uffd6\001\002\000\054\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\073\027\066\030\061\031\uffcd\032\uffcd" +
    "\034\067\035\uffcd\036\uffcd\037\072\040\uffcd\041\057\042" +
    "\uffcd\001\002\000\046\015\071\016\070\017\060\020\074" +
    "\021\065\022\063\023\062\024\064\025\055\026\073\027" +
    "\066\030\061\031\056\032\075\034\067\037\072\041\057" +
    "\042\126\001\002\000\054\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001\002\000\054" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\073\027\066\030\061\031\uffc8" +
    "\032\uffc8\034\067\035\uffc8\036\uffc8\037\072\040\uffc8\041" +
    "\057\042\uffc8\001\002\000\004\045\031\001\002\000\004" +
    "\036\uffda\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\025\uffdc\033\uffdc" +
    "\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\001\002\000\004\041\167\001\002\000\004" +
    "\041\156\001\002\000\036\010\141\011\137\013\133\014" +
    "\134\025\043\033\053\041\044\043\033\044\uffe5\045\050" +
    "\046\047\047\046\050\051\051\052\001\002\000\046\015" +
    "\071\016\070\017\060\020\074\021\065\022\063\023\062" +
    "\024\064\025\055\026\073\027\066\030\061\031\056\032" +
    "\075\034\067\036\154\037\072\041\057\001\002\000\004" +
    "\041\146\001\002\000\040\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\025\uffe3\033\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002\000" +
    "\022\025\043\033\053\041\044\045\050\046\047\047\046" +
    "\050\051\051\052\001\002\000\004\044\143\001\002\000" +
    "\052\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\025\uffe7\033\uffe7\041" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\001\002\000\046\015\071\016\070\017\060\020" +
    "\074\021\065\022\063\023\062\024\064\025\055\026\073" +
    "\027\066\030\061\031\056\032\075\034\067\036\145\037" +
    "\072\041\057\001\002\000\040\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\025\uffe2\033\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002" +
    "\000\022\025\043\033\053\041\044\045\050\046\047\047" +
    "\046\050\051\051\052\001\002\000\046\015\071\016\070" +
    "\017\060\020\074\021\065\022\063\023\062\024\064\025" +
    "\055\026\073\027\066\030\061\031\056\032\075\034\067" +
    "\037\072\041\057\042\150\001\002\000\034\010\141\011" +
    "\137\013\133\014\134\025\043\033\053\041\044\043\033" +
    "\045\050\046\047\047\046\050\051\051\052\001\002\000" +
    "\004\012\152\001\002\000\034\010\141\011\137\013\133" +
    "\014\134\025\043\033\053\041\044\043\033\045\050\046" +
    "\047\047\046\050\051\051\052\001\002\000\040\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\025\uffe1\033\uffe1\041" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\040\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\025\uffe4\033\uffe4\041\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002\000" +
    "\004\044\uffe6\001\002\000\022\025\043\033\053\041\044" +
    "\045\050\046\047\047\046\050\051\051\052\001\002\000" +
    "\046\015\071\016\070\017\060\020\074\021\065\022\063" +
    "\023\062\024\064\025\055\026\073\027\066\030\061\031" +
    "\056\032\075\034\067\036\160\037\072\041\057\001\002" +
    "\000\022\025\043\033\053\041\044\045\050\046\047\047" +
    "\046\050\051\051\052\001\002\000\046\015\071\016\070" +
    "\017\060\020\074\021\065\022\063\023\062\024\064\025" +
    "\055\026\073\027\066\030\061\031\056\032\075\034\067" +
    "\036\162\037\072\041\057\001\002\000\022\025\043\033" +
    "\053\041\044\045\050\046\047\047\046\050\051\051\052" +
    "\001\002\000\046\015\071\016\070\017\060\020\074\021" +
    "\065\022\063\023\062\024\064\025\055\026\073\027\066" +
    "\030\061\031\056\032\075\034\067\036\164\037\072\041" +
    "\057\001\002\000\004\042\165\001\002\000\034\010\141" +
    "\011\137\013\133\014\134\025\043\033\053\041\044\043" +
    "\033\045\050\046\047\047\046\050\051\051\052\001\002" +
    "\000\040\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\025" +
    "\uffdf\033\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\001\002\000\022\025\043\033" +
    "\053\041\044\045\050\046\047\047\046\050\051\051\052" +
    "\001\002\000\046\015\071\016\070\017\060\020\074\021" +
    "\065\022\063\023\062\024\064\025\055\026\073\027\066" +
    "\030\061\031\056\032\075\034\067\037\072\041\057\042" +
    "\171\001\002\000\034\010\141\011\137\013\133\014\134" +
    "\025\043\033\053\041\044\043\033\045\050\046\047\047" +
    "\046\050\051\051\052\001\002\000\040\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\025\uffe0\033\uffe0\041\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\001\002\000\036\010\uffde\011\uffde\013\uffde\014\uffde\025" +
    "\uffde\033\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\001\002\000\014\004\007\005" +
    "\004\006\015\007\014\042\200\001\002\000\006\035\203" +
    "\042\uffea\001\002\000\004\042\202\001\002\000\004\045" +
    "\031\001\002\000\004\043\uffeb\001\002\000\010\035\uffe8" +
    "\037\025\042\uffe8\001\002\000\004\043\uffec\001\002\000" +
    "\012\004\007\005\004\006\015\007\014\001\002\000\004" +
    "\042\uffe9\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\001\002\000\004\002\000\001\002\000\006" +
    "\036\ufff2\045\ufff2\001\002\000\010\036\uffef\043\ufff1\045" +
    "\uffef\001\002\000\004\043\212\001\002\000\014\004\007" +
    "\005\004\006\015\007\014\044\uffdd\001\002\000\004\044" +
    "\214\001\002\000\006\036\ufff3\045\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\016\002\007\003\012\004\004\005\011\012" +
    "\010\013\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\210\015\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\016\007\022" +
    "\016\021\001\001\000\014\003\012\004\015\005\011\012" +
    "\010\013\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\031\001\001\000\002\001\001" +
    "\000\006\006\027\007\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\035\012\010\013" +
    "\005\022\033\023\034\001\001\000\014\005\035\012\010" +
    "\013\005\022\033\023\172\001\001\000\012\021\137\024" +
    "\141\025\134\026\135\001\001\000\010\007\040\010\036" +
    "\011\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\044\001\001\000\004\026\126" +
    "\001\001\000\004\026\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\053\001\001\000" +
    "\002\001\001\000\004\026\123\001\001\000\004\026\122" +
    "\001\001\000\006\026\114\027\115\001\001\000\004\026" +
    "\113\001\001\000\004\026\112\001\001\000\004\026\111" +
    "\001\001\000\004\026\110\001\001\000\004\026\107\001" +
    "\001\000\004\026\106\001\001\000\004\026\105\001\001" +
    "\000\004\026\104\001\001\000\004\026\103\001\001\000" +
    "\004\026\102\001\001\000\004\026\100\001\001\000\004" +
    "\026\077\001\001\000\004\026\076\001\001\000\004\026" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\114\027\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\040\010\130" +
    "\011\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\137\024\154" +
    "\025\134\026\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\146\001\001\000\002\001\001\000\010" +
    "\021\137\025\150\026\135\001\001\000\002\001\001\000" +
    "\010\021\137\025\152\026\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\156\001" +
    "\001\000\002\001\001\000\004\026\160\001\001\000\002" +
    "\001\001\000\004\026\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\137\025\165\026\135\001\001" +
    "\000\002\001\001\000\004\026\167\001\001\000\002\001" +
    "\001\000\010\021\137\025\171\026\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\176\012\010\013" +
    "\005\017\175\020\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\176\012\010" +
    "\013\005\017\203\020\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\035\012\010\013" +
    "\005\022\033\023\212\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            throw new SyntaxError("Error at Line " + cur_token.left + ": Syntax error.");
        }

        public void report_fatal_error(String message, Object info) throws Exception {
            throw new Exception("syntax error.");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= ext_def_list 
            {
              Ast RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def def = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Body body = new Body();
                                TypeDef p1 = null;
                                VarDef p2 = null;
                                FuncDef p3 = null;

                                while (def != null) {
                                    if (def instanceof TypeDef) {
                                        if (p1 == null) {
                                            p1 = (TypeDef) def;
                                            body.setTypeDefs(p1);
                                        } else {
                                            p1.setNext(def);
                                            p1 = (TypeDef) def;
                                        }

                                        def = def.getNext();
                                        p1.setNext(null);
                                    } else if (def instanceof VarDef) {
                                        if (p2 == null) {
                                            p2 = (VarDef) def;
                                            body.setVarDefs(p2);
                                        } else {
                                            p2.setNext(def);
                                            p2 = (VarDef) def;
                                        }

                                        def = def.getNext();
                                        p2.setNext(null);
                                    } else {
                                        if (p3 == null) {
                                            p3 = (FuncDef) def;
                                            body.setFuncDefs(p3);
                                        } else {
                                            p3.setNext(def);
                                            p3 = (FuncDef) def;
                                        }

                                        def = def.getNext();
                                        p3.setNext(null);
                                    }
                                }

                                RESULT = new Ast(body);
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ast start_val = (Ast)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ext_def_list ::= ext_def ext_def_list 
            {
              Def RESULT =null;
		int def1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def def1 = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int def2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int def2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def def2 = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		def1.setNext(def2);RESULT = def1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_def_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ext_def_list ::= 
            {
              Def RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_def_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ext_def ::= specifier ext_dec_list SEMI 
            {
              Def RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Specifier sp = (Specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDef(sp, dec);RESULT.setLine(dec.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ext_def ::= specifier SEMI 
            {
              Def RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Specifier sp = (Specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new TypeDef(sp);RESULT.setLine(sp.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ext_def ::= specifier func_dec comp_st 
            {
              Def RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Specifier sp = (Specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncDec dec = (FuncDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStmt body = (CompStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FuncDef(sp, dec, body);RESULT.setLine(dec.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ext_dec_list ::= var_dec 
            {
              VarDec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_dec_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ext_dec_list ::= var_dec COMMA ext_dec_list 
            {
              VarDec RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDec dec1 = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec2 = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dec1.setNext(dec2);RESULT = dec1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ext_dec_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // specifier ::= type 
            {
              Specifier RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BasicType sp = (BasicType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // specifier ::= struct_specifier 
            {
              Specifier RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructType sp = (StructType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              BasicType RESULT =null;
		RESULT = new BasicType(ParserSym.INT);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= FLOAT 
            {
              BasicType RESULT =null;
		RESULT = new BasicType(ParserSym.FLOAT);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= CHAR 
            {
              BasicType RESULT =null;
		RESULT = new BasicType(ParserSym.CHAR);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_specifier ::= STRUCT opt_tag LC def_list RC 
            {
              StructType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDefList defs = (VarDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new StructType(name, defs);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_specifier",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct_specifier ::= STRUCT tag 
            {
              StructType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StructType(name, null);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_specifier",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_tag ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_tag",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opt_tag ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_tag",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tag ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_dec ::= ID 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new VarDec(id, null, null, null);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_dec ::= var_dec LB INT_LITERAL RB 
            {
              VarDec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if (dec.getLengths() == null) dec.setLengths(new ArrayList<>());dec.getLengths().add(length);RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // func_dec ::= ID LP var_list RP 
            {
              FuncDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Param params = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FuncDec(id, params);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func_dec ::= ID LP RP 
            {
              FuncDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FuncDec(id, null);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_list ::= param_dec 
            {
              Param RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param parameter = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = parameter;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_list ::= param_dec COMMA var_list 
            {
              Param RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Param param1 = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param param2 = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		param1.setNext(param2);RESULT = param1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_dec ::= specifier var_dec 
            {
              Param RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Specifier sp = (Specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Param(sp, dec, null);RESULT.setLine(dec.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comp_st ::= LC def_list stmt_list RC 
            {
              CompStmt RESULT =null;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDefList defs = (VarDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt stmts = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CompStmt(defs, stmts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_st",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_list ::= stmt stmt_list 
            {
              Stmt RESULT =null;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt stmt1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stmt1.setNext(stmt2);RESULT = stmt1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_list ::= 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= exp SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExpStmt(e);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= comp_st 
            {
              Stmt RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStmt stmt = (CompStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN exp SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ReturnStmt(e);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LP exp RP stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt stmt1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IfStmt(e, stmt1, stmt2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= WHILE LP exp RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WhileStmt(e, stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= FOR LP exp SEMI exp SEMI exp SEMI RP stmt 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ForStmt(e1, e2, e3, stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // def_list ::= def def_list 
            {
              VarDefList RESULT =null;
		int def1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDefList def1 = (VarDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int def2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int def2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDefList def2 = (VarDefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		def1.setNext(def2);RESULT = def1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // def_list ::= 
            {
              VarDefList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // def ::= specifier dec_list SEMI 
            {
              VarDefList RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Specifier sp = (Specifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDefList(new VarDef(sp, dec), null);RESULT.setLine(sp.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_list ::= dec 
            {
              VarDec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_list ::= dec COMMA dec_list 
            {
              VarDec RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDec dec1 = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec2 = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dec1.setNext(dec2);RESULT = dec1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec ::= var_dec 
            {
              VarDec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec ::= var_dec ASSIGN exp 
            {
              VarDec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dec.setExp(e);RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp ASSIGN exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.ASSIGN, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.AND, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.OR, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.GT, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp GE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.GE, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.LT, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp LE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.LE, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.EQ, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp NEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.NEQ, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.PLUS, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.MINUS, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp MUL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.MUL, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.DIV, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp MOD exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(ParserSym.MOD, e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LP exp RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new UnaryOp(ParserSym.MINUS, e);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= NOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new UnaryOp(ParserSym.NOT, e);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp LP args RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arg args = (Arg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FuncCall(e, args);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp LP RP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FuncCall(e, null);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp LB exp RB 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrIndex(e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GetField(e1, e2);RESULT.setLine(e1.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Var(id);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= INT_LITERAL 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal(ParserSym.INT_LITERAL, val);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= FLOAT_LITERAL 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal(ParserSym.FLOAT_LITERAL, val);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal(ParserSym.STRING_LITERAL, val);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= CHAR_LITERAL 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal(ParserSym.CHAR_LITERAL, val);RESULT.setLine(cur_token.left);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= exp 
            {
              Arg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arg(e, null);RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= exp COMMA args 
            {
              Arg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arg args = (Arg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Arg argument = new Arg(e, args);RESULT = argument;RESULT.setLine(e.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
