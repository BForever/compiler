package com.compiler.cparser;

import com.compiler.cparser.ast.*;
import com.compiler.cparser.ast.node.*;
import com.compiler.cparser.ParserSym;
import java_cup.runtime.*;
import java.util.ArrayList;

class Parser;

parser code {:
        public void syntax_error(Symbol cur_token) {
            System.out.println("Error at Line " + cur_token.left + ": Syntax error.");
        }

        public void report_fatal_error(String message, Object info) throws Exception {
            throw new Exception("syntax error.");
        }
:};

terminal STRUCT, INT, FLOAT, CHAR, RETURN, IF, ELSE, WHILE, FOR, ASSIGN, GT, GE, LT, LE, EQ, NEQ, PLUS, MINUS, MUL, DIV, MOD, AND, OR, NOT, DOT, COMMA, SEMI, LB, RB, LP, RP, LC, RC;
terminal String ID, STRING_LITERAL;
terminal Integer INT_LITERAL;
terminal Float FLOAT_LITERAL;
terminal Character CHAR_LITERAL;

nonterminal Ast program;
nonterminal Def ext_def, ext_def_list;
nonterminal Specifier specifier;
nonterminal VarDec ext_dec_list, var_dec, dec_list, dec;
nonterminal BasicType type;
nonterminal StructType struct_specifier;
nonterminal String opt_tag, tag;
nonterminal FuncDec func_dec;
nonterminal Param var_list, param_dec;
nonterminal CompStmt comp_st;
nonterminal VarDefList def, def_list;
nonterminal Stmt stmt_list, stmt;
nonterminal Exp exp;
nonterminal Arg args;

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left GT, GE, LT, LE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left MUL, DIV, MOD;
precedence right NOT;
precedence left LP, RP, LB, RB, DOT;

program ::=  ext_def_list:def {:
                                Body body = new Body();
                                TypeDef p1 = null;
                                VarDef p2 = null;
                                FuncDef p3 = null;

                                while (def != null) {
                                    if (def instanceof TypeDef) {
                                        if (p1 == null) {
                                            p1 = (TypeDef) def;
                                            body.setTypeDefs(p1);
                                        } else {
                                            p1.setNext(def);
                                            p1 = (TypeDef) def;
                                        }

                                        def = def.getNext();
                                        p1.setNext(null);
                                    } else if (def instanceof VarDef) {
                                        if (p2 == null) {
                                            p2 = (VarDef) def;
                                            body.setVarDefs(p2);
                                        } else {
                                            p2.setNext(def);
                                            p2 = (VarDef) def;
                                        }

                                        def = def.getNext();
                                        p2.setNext(null);
                                    } else {
                                        if (p3 == null) {
                                            p3 = (FuncDef) def;
                                            body.setFuncDefs(p3);
                                        } else {
                                            p3.setNext(def);
                                            p3 = (FuncDef) def;
                                        }

                                        def = def.getNext();
                                        p3.setNext(null);
                                    }
                                }

                                RESULT = new Ast(body);
                              :}
             ;
ext_def_list ::= ext_def:def1 ext_def_list:def2 {:def1.setNext(def2);RESULT = def1;:}
                |
                ;
ext_def ::= specifier:sp ext_dec_list:dec SEMI {:RESULT = new VarDef(sp, dec);RESULT.setLine(dec.getLine());:}
            | specifier:sp SEMI {:RESULT = new TypeDef(sp);RESULT.setLine(sp.getLine());:}
            | specifier:sp func_dec:dec comp_st:body {:RESULT = new FuncDef(sp, dec, body);RESULT.setLine(dec.getLine());:}
            ;
ext_dec_list ::= var_dec:dec {:RESULT = dec;:}
                | var_dec:dec1 COMMA ext_dec_list:dec2 {:dec1.setNext(dec2);RESULT = dec1;:}
                ;

specifier ::= type:sp {:RESULT = sp;:}
            | struct_specifier:sp {:RESULT = sp;:}
            ;
type ::= INT {:RESULT = new BasicType(ParserSym.INT);RESULT.setLine(cur_token.left);:}
        | FLOAT {:RESULT = new BasicType(ParserSym.FLOAT);RESULT.setLine(cur_token.left);:}
        | CHAR {:RESULT = new BasicType(ParserSym.CHAR);RESULT.setLine(cur_token.left);:}
        ;
struct_specifier ::= STRUCT opt_tag:name LC def_list:defs RC {:RESULT = new StructType(name, defs);RESULT.setLine(cur_token.left);:}
                    | STRUCT tag:name {:RESULT = new StructType(name, null);RESULT.setLine(cur_token.left);:}
                    ;
opt_tag ::= ID:id {:RESULT = id;:}
            |
            ;
tag ::= ID:id {:RESULT = id;:};

var_dec ::= ID:id {:RESULT = new VarDec(id, null, null, null);RESULT.setLine(cur_token.left);:}
            | var_dec:dec LB INT_LITERAL:length RB {:if (dec.getLengths() == null) dec.setLengths(new ArrayList<>());dec.getLengths().add(length);RESULT = dec;:}
            ;
func_dec ::= ID:id LP var_list:params RP {:RESULT = new FuncDec(id, params);RESULT.setLine(cur_token.left);:}
            | ID:id LP RP {:RESULT = new FuncDec(id, null);RESULT.setLine(cur_token.left);:}
            ;
var_list ::= param_dec:param {:RESULT = param;:}
            | param_dec:param1 COMMA var_list:param2 {:param1.setNext(param2);RESULT = param1;:}
            ;
param_dec ::= specifier:sp var_dec:dec {:RESULT = new Param(sp, dec, null);RESULT.setLine(dec.getLine());:};

comp_st ::= LC def_list:defs stmt_list:stmts RC {:RESULT = new CompStmt(defs, stmts);:};
stmt_list ::= stmt:stmt1 stmt_list:stmt2 {:stmt1.setNext(stmt2);RESULT = stmt1;:}
            |
            ;
stmt ::= exp:e SEMI {:RESULT = new ExpStmt(e);RESULT.setLine(e.getLine());:}
        | comp_st:stmt {:RESULT = stmt;:}
        | RETURN exp:e SEMI {:RESULT = new ReturnStmt(e);RESULT.setLine(e.getLine());:}
//        | IF LP exp RP stmt
        | IF LP exp:e RP stmt:stmt1 ELSE stmt:stmt2 {:RESULT = new IfStmt(e, stmt1, stmt2);:}
        | WHILE LP exp:e RP stmt:stmt {:RESULT = new WhileStmt(e, stmt);:}
        | FOR LP exp:e1 SEMI exp:e2 SEMI exp:e3 SEMI RP stmt:stmt {:RESULT = new ForStmt(e1, e2, e3, stmt);:}
        ;

def_list ::= def:def1 def_list:def2 {:def1.setNext(def2);RESULT = def1;:}
            |
            ;
def ::= specifier:sp dec_list:dec SEMI {:RESULT = new VarDefList(new VarDef(sp, dec), null);RESULT.setLine(sp.getLine());:};
dec_list ::= dec:dec {:RESULT = dec;:}
            | dec:dec1 COMMA dec_list:dec2 {:dec1.setNext(dec2);RESULT = dec1;:}
            ;
dec ::= var_dec:dec {:RESULT = dec;:}
        | var_dec:dec ASSIGN exp:e {:dec.setExp(e);RESULT = dec;:}
        ;

exp ::= exp:e1 ASSIGN exp:e2 {:RESULT = new BinaryOp(ParserSym.ASSIGN, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 AND exp:e2 {:RESULT = new BinaryOp(ParserSym.AND, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 OR exp:e2 {:RESULT = new BinaryOp(ParserSym.OR, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 GT exp:e2 {:RESULT = new BinaryOp(ParserSym.GT, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 GE exp:e2 {:RESULT = new BinaryOp(ParserSym.GE, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 LT exp:e2 {:RESULT = new BinaryOp(ParserSym.LT, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 LE exp:e2 {:RESULT = new BinaryOp(ParserSym.LE, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 EQ exp:e2 {:RESULT = new BinaryOp(ParserSym.EQ, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 NEQ exp:e2 {:RESULT = new BinaryOp(ParserSym.NEQ, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 PLUS exp:e2 {:RESULT = new BinaryOp(ParserSym.PLUS, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 MINUS exp:e2 {:RESULT = new BinaryOp(ParserSym.MINUS, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 MUL exp:e2 {:RESULT = new BinaryOp(ParserSym.MUL, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 DIV exp:e2 {:RESULT = new BinaryOp(ParserSym.DIV, e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 MOD exp:e2 {:RESULT = new BinaryOp(ParserSym.MOD, e1, e2);RESULT.setLine(e1.getLine());:}
        | LP exp:e RP {:RESULT = e;:}
        | MINUS exp:e {:RESULT = new UnaryOp(ParserSym.MINUS, e);RESULT.setLine(e.getLine());:}
        | NOT exp:e {:RESULT = new UnaryOp(ParserSym.NOT, e);RESULT.setLine(e.getLine());:}
        | exp:e LP args:args RP {:RESULT = new FuncCall(e, args);RESULT.setLine(e.getLine());:}
        | exp:e LP RP  {:RESULT = new FuncCall(e, null);RESULT.setLine(e.getLine());:}
        | exp:e1 LB exp:e2 RB {:RESULT = new ArrIndex(e1, e2);RESULT.setLine(e1.getLine());:}
        | exp:e1 DOT exp:e2 {:RESULT = new GetField(e1, e2);RESULT.setLine(e1.getLine());:}
        | ID:id {:RESULT = new Var(id);RESULT.setLine(cur_token.left);:}
        | INT_LITERAL:val {:RESULT = new Literal(ParserSym.INT_LITERAL, val);RESULT.setLine(cur_token.left);:}
        | FLOAT_LITERAL:val {:RESULT = new Literal(ParserSym.FLOAT_LITERAL, val);RESULT.setLine(cur_token.left);:}
        | STRING_LITERAL:val {:RESULT = new Literal(ParserSym.STRING_LITERAL, val);RESULT.setLine(cur_token.left);:}
        | CHAR_LITERAL:val {:RESULT = new Literal(ParserSym.CHAR_LITERAL, val);RESULT.setLine(cur_token.left);:}
        ;
args ::= exp:e {:RESULT = new Arg(e, null);RESULT.setLine(e.getLine());:}
        | exp:e COMMA args:args {:Arg arg = new Arg(e, args);RESULT = arg;RESULT.setLine(e.getLine());:}
        ;